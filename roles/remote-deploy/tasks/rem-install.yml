---
#
# aasf-infra-auto/roles/remote-deploy/tasks/rem-install.yml
#


- name: make sure Java is installed
  yum:
    name={{ item }}
    state=present
  with_items:
    - java-1.8.0-openjdk-headless
    - epel-release
    - daemonize

- name: create group for AASF components
  group:
    name={{ rem_user_grp }}
    state=present

- name: create root directory for AASF components
  file:
    path={{ rem_home_dir }}
    owner=root
    group={{ rem_user_grp }}
    mode=0770
    state=directory

# here is where we'd add options for pulling content from a repo

- name: unpack AASF content on remote node
  unarchive:
    backup=no
    copy=yes
    src={{ rem_tarball_dst }}
    dest={{ rem_home_dir }}
    owner=root
    group={{ rem_user_grp }}
    mode=0775
  notify: remove AASF artifact archive

- name: install AASF components
  include: rem-component-install.yml
  with_items:
    - aasf-connector
    - aasf-controlproxy
    - aasf-health
    - csfms
  loop_control:
    loop_var: component

- debug: var=playbook_dir

- name: test if local file exists to push
  local_action: stat path="{{ playbook_dir }}/roles/remote-deploy/files/{{ rem_keystore_filename }}"
  become: no
  register: result

- debug: var=result

- name: copy local file to remote system if exists
  copy:
    src="{{ playbook_dir }}/roles/remote-deploy/files/{{ rem_keystore_filename }}"
    dest="{{ rem_home_dir }}/aasf-connector/keys/{{ rem_keystore_filename }}"
    owner={{ rem_connector_usr }}
    group={{ rem_user_grp }}
    mode=0660
    backup=no
  when: result.stat.exists

# - name: deploy init scripts for AASF components
#   template:
#     backup=no
#     dest=/etc/init.d/{{ component.name }}
#     mode=0644
#     owner=root
#     src=initscript.j2
#   with_items:
#     - { component: "{{ rem_connector_usr }}", }
